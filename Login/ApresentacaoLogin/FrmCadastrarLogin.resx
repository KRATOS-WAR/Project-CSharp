<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>